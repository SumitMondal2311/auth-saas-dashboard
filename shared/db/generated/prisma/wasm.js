/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
    PrismaClientKnownRequestError,
    PrismaClientUnknownRequestError,
    PrismaClientRustPanicError,
    PrismaClientInitializationError,
    PrismaClientValidationError,
    getPrismaClient,
    sqltag,
    empty,
    join,
    raw,
    skip,
    Decimal,
    Debug,
    objectEnumValues,
    makeStrictEnum,
    Extensions,
    warnOnce,
    defineDmmfProperty,
    Public,
    getRuntime,
    createParam,
} = require("./runtime/wasm-engine-edge.js");

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
Prisma.prismaVersion = {
    client: "6.17.0",
    engine: "c0aafc03b8ef6cdced8654b9a817999e02457d6a",
};

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError;
Prisma.PrismaClientInitializationError = PrismaClientInitializationError;
Prisma.PrismaClientValidationError = PrismaClientValidationError;
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag;
Prisma.empty = empty;
Prisma.join = join;
Prisma.raw = raw;
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = Extensions.getExtensionContext;
Prisma.defineExtension = Extensions.defineExtension;

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
    DbNull: objectEnumValues.classes.DbNull,
    JsonNull: objectEnumValues.classes.JsonNull,
    AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
    ReadUncommitted: "ReadUncommitted",
    ReadCommitted: "ReadCommitted",
    RepeatableRead: "RepeatableRead",
    Serializable: "Serializable",
});

exports.Prisma.UserScalarFieldEnum = {
    id: "id",
    isVerified: "isVerified",
    username: "username",
    emailAddress: "emailAddress",
    passwordHash: "passwordHash",
    createdAt: "createdAt",
    updatedAt: "updatedAt",
};

exports.Prisma.CliSessionScalarFieldEnum = {
    id: "id",
    userId: "userId",
    tokenHash: "tokenHash",
    createdAt: "createdAt",
};

exports.Prisma.ApplicationScalarFieldEnum = {
    id: "id",
    ownerId: "ownerId",
    publishableKey: "publishableKey",
    secretKey: "secretKey",
    name: "name",
    createdAt: "createdAt",
    updatedAt: "updatedAt",
};

exports.Prisma.AppUserScalarFieldEnum = {
    id: "id",
    applicationId: "applicationId",
    createdAt: "createdAt",
    updatedAt: "updatedAt",
};

exports.Prisma.AppUserAccountScalarFieldEnum = {
    id: "id",
    applicationId: "applicationId",
    username: "username",
    lastName: "lastName",
    imageUrl: "imageUrl",
    firstName: "firstName",
    userId: "userId",
    passwordHash: "passwordHash",
    createdAt: "createdAt",
    updatedAt: "updatedAt",
};

exports.Prisma.AppUserEmailScalarFieldEnum = {
    id: "id",
    accountId: "accountId",
    applicationId: "applicationId",
    isVerified: "isVerified",
    address: "address",
    isPrimary: "isPrimary",
    createdAt: "createdAt",
    updatedAt: "updatedAt",
};

exports.Prisma.AppUserSessionScalarFieldEnum = {
    id: "id",
    accountId: "accountId",
    refreshTokenId: "refreshTokenId",
    userAgent: "userAgent",
    ipAddress: "ipAddress",
    applicationId: "applicationId",
    expiresAt: "expiresAt",
    createdAt: "createdAt",
    updatedAt: "updatedAt",
};

exports.Prisma.AppUserOAuthAccountScalarFieldEnum = {
    id: "id",
    applicationId: "applicationId",
    provider: "provider",
    emailId: "emailId",
    providerUserId: "providerUserId",
    accountId: "accountId",
    createdAt: "createdAt",
};

exports.Prisma.SortOrder = {
    asc: "asc",
    desc: "desc",
};

exports.Prisma.QueryMode = {
    default: "default",
    insensitive: "insensitive",
};

exports.Prisma.NullsOrder = {
    first: "first",
    last: "last",
};
exports.OAuthProvider = exports.$Enums.OAuthProvider = {
    GITHUB: "GITHUB",
    GOOGLE: "GOOGLE",
};

exports.Prisma.ModelName = {
    User: "User",
    CliSession: "CliSession",
    Application: "Application",
    AppUser: "AppUser",
    AppUserAccount: "AppUserAccount",
    AppUserEmail: "AppUserEmail",
    AppUserSession: "AppUserSession",
    AppUserOAuthAccount: "AppUserOAuthAccount",
};
/**
 * Create the Client
 */
const config = {
    generator: {
        name: "client",
        provider: {
            fromEnvVar: null,
            value: "prisma-client-js",
        },
        output: {
            value: "/Users/sumit/Desktop/auth saas mvp/shared/db/generated/prisma",
            fromEnvVar: null,
        },
        config: {
            engineType: "library",
        },
        binaryTargets: [
            {
                fromEnvVar: null,
                value: "darwin-arm64",
                native: true,
            },
        ],
        previewFeatures: [],
        sourceFilePath: "/Users/sumit/Desktop/auth saas mvp/shared/db/prisma/schema.prisma",
        isCustomOutput: true,
    },
    relativeEnvPaths: {
        rootEnvPath: null,
    },
    relativePath: "../../prisma",
    clientVersion: "6.17.0",
    engineVersion: "c0aafc03b8ef6cdced8654b9a817999e02457d6a",
    datasourceNames: ["db"],
    activeProvider: "postgresql",
    postinstall: false,
    inlineDatasources: {
        db: {
            url: {
                fromEnvVar: "DB_URL",
                value: null,
            },
        },
    },
    inlineSchema:
        'generator client {\n  provider = "prisma-client-js"\n  output   = "../generated/prisma"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DB_URL")\n}\n\nmodel User {\n  id           String   @id @default(uuid()) @db.Uuid\n  isVerified   Boolean  @default(true)\n  username     String   @unique\n  emailAddress String   @unique\n  passwordHash String\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  applications Application[]\n  webSessions  WebSession[]  @ignore\n  cliSessions  CliSession[]\n}\n\nmodel CliSession {\n  id        String   @id @default(uuid()) @db.Uuid\n  userId    String   @db.Uuid\n  tokenHash String   @unique\n  createdAt DateTime @default(now())\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n}\n\n// -- -- -- later for v2 -- -- -- //\nmodel WebSession {\n  id             String   @id @default(uuid()) @db.Uuid\n  refreshTokenId String   @unique\n  userAgent      String   @default("unknown")\n  ipAddress      String   @default("unknown")\n  userId         String   @db.Uuid\n  expiresAt      DateTime\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@ignore\n}\n\nmodel Application {\n  id             String   @id @default(uuid()) @db.Uuid\n  ownerId        String   @db.Uuid\n  publishableKey String   @unique\n  secretKey      String   @unique\n  name           String\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n\n  accounts      AppUserAccount[]\n  users         AppUser[]\n  sessions      AppUserSession[]\n  emails        AppUserEmail[]\n  oauthAccounts AppUserOAuthAccount[]\n\n  @@index([secretKey])\n  @@index([ownerId])\n  @@index([publishableKey])\n}\n\nmodel AppUser {\n  id            String   @id @default(uuid()) @db.Uuid\n  applicationId String   @db.Uuid\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n\n  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)\n\n  accounts AppUserAccount[]\n\n  @@index([applicationId])\n}\n\nmodel AppUserAccount {\n  id            String   @id @default(uuid()) @db.Uuid\n  applicationId String   @db.Uuid\n  username      String?\n  lastName      String?\n  imageUrl      String?\n  firstName     String?\n  userId        String   @db.Uuid\n  passwordHash  String?\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n\n  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)\n  user        AppUser     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  sessions      AppUserSession[]\n  emails        AppUserEmail[]\n  oauthAccounts AppUserOAuthAccount[]\n\n  @@unique([username, applicationId])\n  @@index([applicationId, userId])\n}\n\nmodel AppUserEmail {\n  id            String   @id @default(uuid()) @db.Uuid\n  accountId     String   @db.Uuid\n  applicationId String   @db.Uuid\n  isVerified    Boolean  @default(true)\n  address       String\n  isPrimary     Boolean\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n\n  oauthAccounts AppUserOAuthAccount[]\n\n  account     AppUserAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)\n  application Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)\n\n  @@unique([address, applicationId])\n  @@index([accountId])\n}\n\nmodel AppUserSession {\n  id             String   @id @default(uuid()) @db.Uuid\n  accountId      String   @db.Uuid\n  refreshTokenId String   @unique\n  userAgent      String   @default("unknown")\n  ipAddress      String   @default("unknown")\n  applicationId  String   @db.Uuid\n  expiresAt      DateTime\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  account     AppUserAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)\n  application Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)\n\n  @@index([accountId, applicationId])\n}\n\nenum OAuthProvider {\n  GITHUB\n  GOOGLE\n}\n\nmodel AppUserOAuthAccount {\n  id             String        @id @default(uuid()) @db.Uuid\n  applicationId  String        @db.Uuid\n  provider       OAuthProvider\n  emailId        String        @db.Uuid\n  providerUserId String\n  accountId      String        @db.Uuid\n  createdAt      DateTime      @default(now())\n\n  email       AppUserEmail   @relation(fields: [emailId], references: [id], onDelete: Cascade)\n  application Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)\n  account     AppUserAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)\n\n  @@unique([providerUserId, provider, applicationId])\n  @@index([emailId, applicationId])\n}\n',
    inlineSchemaHash: "31c0c4c1611d56033886449560d341a50716e30e2401803f13e8ef4a132332fe",
    copyEngine: true,
};
config.dirname = "/";

config.runtimeDataModel = JSON.parse(
    '{"models":{"User":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"isVerified","kind":"scalar","type":"Boolean"},{"name":"username","kind":"scalar","type":"String"},{"name":"emailAddress","kind":"scalar","type":"String"},{"name":"passwordHash","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"applications","kind":"object","type":"Application","relationName":"ApplicationToUser"},{"name":"cliSessions","kind":"object","type":"CliSession","relationName":"CliSessionToUser"}],"dbName":null},"CliSession":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"tokenHash","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"user","kind":"object","type":"User","relationName":"CliSessionToUser"}],"dbName":null},"Application":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"ownerId","kind":"scalar","type":"String"},{"name":"publishableKey","kind":"scalar","type":"String"},{"name":"secretKey","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"owner","kind":"object","type":"User","relationName":"ApplicationToUser"},{"name":"accounts","kind":"object","type":"AppUserAccount","relationName":"AppUserAccountToApplication"},{"name":"users","kind":"object","type":"AppUser","relationName":"AppUserToApplication"},{"name":"sessions","kind":"object","type":"AppUserSession","relationName":"AppUserSessionToApplication"},{"name":"emails","kind":"object","type":"AppUserEmail","relationName":"AppUserEmailToApplication"},{"name":"oauthAccounts","kind":"object","type":"AppUserOAuthAccount","relationName":"AppUserOAuthAccountToApplication"}],"dbName":null},"AppUser":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"applicationId","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"application","kind":"object","type":"Application","relationName":"AppUserToApplication"},{"name":"accounts","kind":"object","type":"AppUserAccount","relationName":"AppUserToAppUserAccount"}],"dbName":null},"AppUserAccount":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"applicationId","kind":"scalar","type":"String"},{"name":"username","kind":"scalar","type":"String"},{"name":"lastName","kind":"scalar","type":"String"},{"name":"imageUrl","kind":"scalar","type":"String"},{"name":"firstName","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"passwordHash","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"application","kind":"object","type":"Application","relationName":"AppUserAccountToApplication"},{"name":"user","kind":"object","type":"AppUser","relationName":"AppUserToAppUserAccount"},{"name":"sessions","kind":"object","type":"AppUserSession","relationName":"AppUserAccountToAppUserSession"},{"name":"emails","kind":"object","type":"AppUserEmail","relationName":"AppUserAccountToAppUserEmail"},{"name":"oauthAccounts","kind":"object","type":"AppUserOAuthAccount","relationName":"AppUserAccountToAppUserOAuthAccount"}],"dbName":null},"AppUserEmail":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"accountId","kind":"scalar","type":"String"},{"name":"applicationId","kind":"scalar","type":"String"},{"name":"isVerified","kind":"scalar","type":"Boolean"},{"name":"address","kind":"scalar","type":"String"},{"name":"isPrimary","kind":"scalar","type":"Boolean"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"oauthAccounts","kind":"object","type":"AppUserOAuthAccount","relationName":"AppUserEmailToAppUserOAuthAccount"},{"name":"account","kind":"object","type":"AppUserAccount","relationName":"AppUserAccountToAppUserEmail"},{"name":"application","kind":"object","type":"Application","relationName":"AppUserEmailToApplication"}],"dbName":null},"AppUserSession":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"accountId","kind":"scalar","type":"String"},{"name":"refreshTokenId","kind":"scalar","type":"String"},{"name":"userAgent","kind":"scalar","type":"String"},{"name":"ipAddress","kind":"scalar","type":"String"},{"name":"applicationId","kind":"scalar","type":"String"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"account","kind":"object","type":"AppUserAccount","relationName":"AppUserAccountToAppUserSession"},{"name":"application","kind":"object","type":"Application","relationName":"AppUserSessionToApplication"}],"dbName":null},"AppUserOAuthAccount":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"applicationId","kind":"scalar","type":"String"},{"name":"provider","kind":"enum","type":"OAuthProvider"},{"name":"emailId","kind":"scalar","type":"String"},{"name":"providerUserId","kind":"scalar","type":"String"},{"name":"accountId","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"email","kind":"object","type":"AppUserEmail","relationName":"AppUserEmailToAppUserOAuthAccount"},{"name":"application","kind":"object","type":"Application","relationName":"AppUserOAuthAccountToApplication"},{"name":"account","kind":"object","type":"AppUserAccount","relationName":"AppUserAccountToAppUserOAuthAccount"}],"dbName":null}},"enums":{},"types":{}}'
);
defineDmmfProperty(exports.Prisma, config.runtimeDataModel);
config.engineWasm = {
    getRuntime: async () => require("./query_engine_bg.js"),
    getQueryEngineWasmModule: async () => {
        const loader = (await import("#wasm-engine-loader")).default;
        const engine = (await loader).default;
        return engine;
    },
};
config.compilerWasm = undefined;

config.injectableEdgeEnv = () => ({
    parsed: {
        DB_URL:
            (typeof globalThis !== "undefined" && globalThis["DB_URL"]) ||
            (typeof process !== "undefined" && process.env && process.env.DB_URL) ||
            undefined,
    },
});

if (
    (typeof globalThis !== "undefined" && globalThis["DEBUG"]) ||
    (typeof process !== "undefined" && process.env && process.env.DEBUG) ||
    undefined
) {
    Debug.enable(
        (typeof globalThis !== "undefined" && globalThis["DEBUG"]) ||
            (typeof process !== "undefined" && process.env && process.env.DEBUG) ||
            undefined
    );
}

const PrismaClient = getPrismaClient(config);
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
