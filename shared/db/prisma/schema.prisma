generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

model User {
    id           String   @id @default(uuid()) @db.Uuid
    isVerified   Boolean  @default(true)
    username     String   @unique
    emailAddress String   @unique
    passwordHash String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    applications Application[]
    webSessions  WebSession[]  @ignore
    cliSessions  CliSession[]
}

model CliSession {
    id        String   @id @default(uuid()) @db.Uuid
    userId    String   @db.Uuid
    tokenHash String   @unique
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

// -- -- -- later for v2 -- -- -- //
model WebSession {
    id             String   @id @default(uuid()) @db.Uuid
    refreshTokenId String   @unique
    userAgent      String   @default("unknown")
    ipAddress      String   @default("unknown")
    userId         String   @db.Uuid
    expiresAt      DateTime
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@ignore
}

model Application {
    id             String   @id @default(uuid()) @db.Uuid
    ownerId        String   @db.Uuid
    publishableKey String   @unique
    secretKey      String   @unique
    name           String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    accounts      AppUserAccount[]
    users         AppUser[]
    sessions      AppUserSession[]
    emails        AppUserEmail[]
    oauthAccounts AppUserOAuthAccount[]

    @@index([secretKey])
    @@index([ownerId])
    @@index([publishableKey])
}

model AppUser {
    id            String   @id @default(uuid()) @db.Uuid
    applicationId String   @db.Uuid
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

    accounts AppUserAccount[]

    @@index([applicationId])
}

model AppUserAccount {
    id            String   @id @default(uuid()) @db.Uuid
    applicationId String   @db.Uuid
    username      String?
    lastName      String?
    imageUrl      String?
    firstName     String?
    userId        String   @db.Uuid
    passwordHash  String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
    user        AppUser     @relation(fields: [userId], references: [id], onDelete: Cascade)

    sessions      AppUserSession[]
    emails        AppUserEmail[]
    oauthAccounts AppUserOAuthAccount[]

    @@unique([username, applicationId])
    @@index([applicationId, userId])
}

model AppUserEmail {
    id            String   @id @default(uuid()) @db.Uuid
    accountId     String   @db.Uuid
    applicationId String   @db.Uuid
    isVerified    Boolean  @default(true)
    address       String
    isPrimary     Boolean
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    oauthAccounts AppUserOAuthAccount[]

    account     AppUserAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
    application Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)

    @@unique([address, applicationId])
    @@index([accountId])
}

model AppUserSession {
    id             String   @id @default(uuid()) @db.Uuid
    accountId      String   @db.Uuid
    refreshTokenId String   @unique
    userAgent      String   @default("unknown")
    ipAddress      String   @default("unknown")
    applicationId  String   @db.Uuid
    expiresAt      DateTime
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    account     AppUserAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
    application Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)

    @@index([accountId, applicationId])
}

enum OAuthProvider {
    GITHUB
    GOOGLE
}

model AppUserOAuthAccount {
    id             String        @id @default(uuid()) @db.Uuid
    applicationId  String        @db.Uuid
    provider       OAuthProvider
    emailId        String        @db.Uuid
    providerUserId String
    accountId      String        @db.Uuid
    createdAt      DateTime      @default(now())

    email       AppUserEmail   @relation(fields: [emailId], references: [id], onDelete: Cascade)
    application Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)
    account     AppUserAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

    @@unique([providerUserId, provider, applicationId])
    @@index([emailId, applicationId])
}
